# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Go-v1dI8wRVd2DYIKk3LsHwbybJFmlIK
"""

'''
Nome: João Vítor Brito da Silveira

Método: Runge-Kutta de 2ºOrdem (Ralson)

Resumo: O Método de Runge-Kutta de 2ª Ordem (Ralston) é uma técnica numérica
usada para resolver equações diferenciais ordinárias (EDOs). Ele faz parte de
uma família de métodos Runge-Kutta, que são utilizados para aproximar soluções
de EDOs sem a necessidade de calcular derivadas de ordens superiores. O método
de Ralston é uma versão otimizada do Runge-Kutta de segunda ordem, que foi
ajustada para minimizar o erro de truncamento local.
'''

#Importando funções matemáticas
import numpy as np

#Função que define a equação diferencial ordinária (EDO) do exemplo
def f(x,y):
    return -2*x**3+12*x**2-20*x+8.5

#Função que define a solução exata do problema
def solucao_exata(x):
    return -0.5*x**4+4*x**3-10*x**2+8.5*x+1

#Função que implementa o Método de Ralston
def metodo_ralston(x0,y0,h,x_fim):
    n=int((x_fim-x0)/h) #Calcula o número de iterações com base no intervalo e no passo
    valores_x=[x0] #Inicializa a lista de valores de x
    valores_y=[y0] #Inicializa a lista de valores de y

    #Loop principal para aplicar o Método de Ralston
    for i in range(n):
        x_i=valores_x[-1] #Recupera o valor atual de x
        y_i=valores_y[-1] #Recupera o valor atual de y

        k1=f(x_i,y_i) #Calcula k1 = f(x_i, y_i)
        k2=f(x_i+3/4*h,y_i+3/4*k1*h) #Calcula k2 com base no método de Ralston

        y_prox=y_i+(1/3*k1+2/3*k2)*h #Calcula o próximo valor de y
        x_prox=x_i+h #Atualiza o valor de x

        valores_x.append(x_prox) #Armazena o próximo valor de x
        valores_y.append(y_prox) #Armazena o próximo valor de y

    return np.array(valores_x),np.array(valores_y)

#Parâmetros do problema
x0=0 #Valor inicial de x
y0=1 #Valor inicial de y
h=0.5 #Tamanho do passo
x_fim=4 #Valor final de x

#Chama a função metodo_ralston para calcular os valores de y no intervalo
valores_x,valores_y=metodo_ralston(x0,y0,h,x_fim)

#Exibe os resultados e calcula o erro percentual relativo
print("x       y_calculado    y_verdadeiro   Erro Relativo (%)")
for x,y_calc in zip(valores_x,valores_y):
    y_verdadeiro=solucao_exata(x) #Calcula o valor verdadeiro de y usando a solução exata
    erro_relativo=abs((y_verdadeiro-y_calc)/y_verdadeiro)*100 #Calcula o erro relativo percentual
    print(f"{x:.2f}    {y_calc:.5f}      {y_verdadeiro:.5f}        {erro_relativo:.2f}")