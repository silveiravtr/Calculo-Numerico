# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YnGWwe741-w0-Y3rku_QvhNrGIVITR5E
"""

import numpy as np

#Dados do problema
m1, m2, m3 = 2.150, 3.204, 2.595
k=10
g=9.81

#Matriz do sistema e vetor de constantes
A=np.array([
    [30, -20, 0],
    [-20, 30, -10],
    [0, -10, 10]
])
b=np.array([
    21.0795,
    31.4166,
    25.4255
])

#Método da Eliminação Gaussiana
x_elim_gaussiana = np.linalg.solve(A, b)
print("Solução pela Eliminação Gaussiana:")
print(f"x1 ={x_elim_gaussiana[0]:.4f}m")
print(f"x2 ={x_elim_gaussiana[1]:.4f}m")
print(f"x3 ={x_elim_gaussiana[2]:.4f}m")

def metodo_jacobi(A, b, tol=1e-2, max_iter=100):
    n=len(b)
    x=np.zeros(n)
    x_new=np.zeros(n)
    iter_count=0

    while iter_count<max_iter:
        for i in range(n):
            s1=np.dot(A[i, :i], x[:i])
            s2=np.dot(A[i, i+1:], x[i+1:])
            x_new[i]=(b[i]-s1-s2)/A[i, i]

        if np.all(np.abs(x_new-x)<tol):
            break
        x=x_new.copy()
        iter_count+=1

    return x, iter_count

x_jacobi, iter_jacobi=metodo_jacobi(A, b)
print("\nSolução pelo Método de Jacobi:")
print(f"x1 ={x_jacobi[0]:.4f}m")
print(f"x2 ={x_jacobi[1]:.4f}m")
print(f"x3 ={x_jacobi[2]:.4f}m")
print(f"Número de iterações: {iter_jacobi}")

def metodo_gauss_seidel(A, b, tol=1e-2, max_iter=100):
    n=len(b)
    x=np.zeros(n)
    iter_count=0

    while iter_count<max_iter:
        x_old=x.copy()
        for i in range(n):
            s1=np.dot(A[i, :i], x[:i])
            s2=np.dot(A[i, i+1:], x_old[i+1:])
            x[i]=(b[i]-s1-s2)/A[i, i]

        if np.all(np.abs(x-x_old)<tol):
            break
        iter_count+=1

    return x, iter_count

x_gauss_seidel, iter_gauss_seidel = metodo_gauss_seidel(A, b)
print("\nSolução pelo Método de Gauss-Seidel:")
print(f"x1 ={x_gauss_seidel[0]:.4f}m")
print(f"x2 ={x_gauss_seidel[1]:.4f}m")
print(f"x3 ={x_gauss_seidel[2]:.4f}m")
print(f"Número de iterações: {iter_gauss_seidel}")