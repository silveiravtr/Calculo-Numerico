# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_yABOdZV1RbW6iaXEDLnCkZLY8jW0DI9
"""

'''
Aluno: João Vítor Brito Silveira

Método: Newton-Raphson

Resumo: O método de Newton-Raphson, desenvolvido por Isaac Newton e Joseph Raphson,
tem o objetivo de estimar as raízes de uma função. O primeiro passo é escolher uma aproximação
inicial. Após isso, calcula-se a equação da reta tangente (por meio da derivada) da função nesse
ponto e a interseção dela com o eixo das abcissas, a fim de encontrar uma melhor aproximação para
a raiz. Repetindo-se o processo, cria-se um método iterativo para encontrarmos a raiz da função.

'''

#importando funções matemáticas
import numpy as np
import math

#valores iniciais e dados do enunciado
x0=0 #chute inicial que deve iniciar na função
tol=0.05 #tolerância desejada (5%)
max_iter=100 #nº máximo de iterações

#definindo a função original do problema
def f(x):
  return math.exp(-x)-x

#definindo a derivada da função
def df(x):
  return -math.exp(-x)-1

#iniciando um contador de iterações de nome iter
iter=0

#enquanto iter for menor que o limite de iterações
while iter<max_iter:

  #calculando o valor da função e da derivada noponto x0
  f_x0=f(x0)
  df_x0=df(x0)

  #calculando a nova estimativa
  x1=x0-(f_x0/df_x0)

  #calculando o erro relativo percentual
  erro_rel=abs((x1-x0)/x1)*100

  #caso o erro for menor que a tolerância, retornar x1 como aproximação da raiz
  if abs(f(x1))<tol:
    #exibindo os resultados
    print("A raiz estimada é de: ", x1)
    print("O Erro Relativo Percentual é de: ",  erro_rel)
    break

  #atualizando x1 para x0
  x0=x1
  #incrementando o contador de iterações
  iter+=1

#no caso de não convergir dentro do limite de iterações
if iter==max_iter:
  print("O método não convergiu dentro de um limite de 100 iterações.")