# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gz0TbW3_EcbK0kY_xW4eEZ7OoNSXSmp1
"""

'''
Aluno: João Vítor Brito Silveira

Método: Método das Secantes

Resumo: O método da Secante é uma alternativa, onde se faz uso de
uma reta secante como uma aproximação da reta tangente em um determinado ponto.
Afim de eliminarmos essa desvantagem, aproximamos f'(x) por
uma diferença dividida regressiva.

'''

#importando funções matemáticas
import numpy as np
import math

#valores iniciais e dados do enunciado
x0=0
x1=1
tol=0.01 #tolerância desejada (1%)
max_iter=100 #n° máximo de iterações

#definindo a função original do problema
def f(x):
  return math.exp(-x)-x

#definindo o método
def metodo_secante( x0, x1, tol, max_iter):
  iter=0 #iniciando um contador de nome iter

  #enquanto o n° de iterações for menor que o limite
  while iter<max_iter:

    #calculando o próximo ponto
    x2=x1-f(x1)*(x0-x1)/(f(x0)-f(x1))

    #calculando o erro relativo aproximado
    erro_rel=abs((x2-x1)/x2)*100

    #se o erro relativo for menor que a tolerância, retorna a aproximação da raiz
    if erro_rel<tol:
      return x2

    #atualizando x0 e x1 para os novos valores x1 e x2
    x0=x1
    x1=x2

    #incrementando o contador de iterações
    iter+=1

  #em caso do métdo não convergir dentro do limite de iterações
  print("O método não convergiu dentro de um limite de 100 iterações.")

#encontrando a raiz
raiz=metodo_secante(x0, x1, tol, max_iter)

#imprimindo a raiz e o errro relativo aproximados
if raiz is not None:
  print("A raiz da função é aproximadamente: ", raiz)