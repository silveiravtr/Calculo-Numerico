# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ei2Q4EB2vXXovrHd4DI46JS4EdRx_buz
"""

'''
Nome: João Vítor Brito da Silveira

Método: Método Iterativo de Jacobi

Resumo: O Método de Jacobi é uma técnica iterativa usada para resolver
sistemas lineares de equações. É um dos métodos de iteração direta e
é particularmente útil quando se lida com grandes sistemas esparsos.
O método de Jacobi resolve um sistema linear de equações da forma:
Ax=b, onde:
A é uma matriz de coeficientes, x é o vetor de incógnitas, e b é
o vetor dos termos constantes.

'''

#Importar funções matemáticas
import numpy as np

def jacobi(A, b, x0=None, tol=0.05, max_iter=100):

#Resolve o sistema Ax = b usando o método de Jacobi.
#A (numpy.ndarray): Matriz de coeficientes.
#b (numpy.ndarray): Vetor dos termos constantes.
#x0 (numpy.ndarray): Estimativa inicial das soluções (opcional).
#tol (float): Tolerância para o critério de parada (em porcentagem).
#max_iter (int): Número máximo de iterações.
#numpy.ndarray: Solução do sistema.

    n=len(b) #Número de equações
    x=np.copy(x0) if x0 is not None else np.zeros(n) #Inicializa o vetor de soluções com a estimativa inicial
    for _ in range(max_iter):
        x_velho=np.copy(x) #Armazena a solução antiga para comparação
        for i in range(n):
            #Calcula a soma dos termos conhecidos para a i-ésima equação
            sigma=sum(A[i][j]*x_velho[j] for j in range(n) if j!=i)
            #Atualiza a solução para a i-ésima variável
            x[i]=(b[i]-sigma)/A[i][i]
        #Verifica a convergência com base na tolerância especificada
        if np.linalg.norm(x-x_velho, ord=np.inf)/np.linalg.norm(x, ord=np.inf)<tol:
            return x
    return x

#Definição da matriz de coeficientes e do vetor de constantes
A=np.array([[15, -3, -1], [-3, 18, -6], [-4, -1, 12]], dtype=float)
b=np.array([3800, 1200, 2350], dtype=float)
x0=np.zeros(3)  #Estimativa inicial das soluções

#Solução usando Jacobi
jacobi_solucao=jacobi(A, b, x0=x0)
print("Solução de Jacobi:", jacobi_solucao)

#Definição da matriz de coeficientes e do vetor de constantes para o segundo sistema
A2 = np.array([[10, 2, -1], [-3, -6, 2], [1, 1, 5]], dtype=float)
b2 = np.array([27, -61.5, -21.5], dtype=float)
x0_2 = np.zeros(3)  #Estimativa inicial das soluções

#Solução usando Jacobi para o segundo sistema
jacobi_solucao_2 = jacobi(A2, b2, x0=x0_2)
print("Solução de Jacobi para o 2° sistema:", jacobi_solucao_2)