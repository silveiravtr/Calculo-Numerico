# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19U1Xoon6C__8p27Ou1Y_yYZig-UIbtUX
"""

'''
Nome: João Vítor Brito da Silveira

Método: Fatoração LU

Resumo: A fatoração LU é um método direto, é uma técnica matemática usada para
resolver sistemas de equações lineares, calcular determinantes e encontrar
inversas de matrizes. O método divide uma matriz A em duas matrizes triangulares,
 uma inferior (L) e outra superior (U).
'''
#Importar funções matemáticas
import numpy as np

#Definir a matriz A e o vetor b
A=np.array([
    [3, -0.1, -0.2],
    [0.1, 7, -0.3],
    [0.3, -0.2, 10]
], dtype=float)

b=np.array([7.85, -19.3, 71.4], dtype=float)

#Função para decomposição LU
def decomposicao_lu(A):
    n=len(A)  #Número de linhas/colunas da matriz A
    L=np.zeros_like(A)  #Inicializar a matriz L com zeros
    U=np.zeros_like(A)  #Inicializar a matriz U com zeros

    #Definir a diagonal de L como 1
    for i in range(n):
        L[i][i]=1

    #Processo de decomposição LU
    for k in range(n):
        #Calcular os elementos de U
        for j in range(k, n):
            U[k][j]=A[k][j]-sum(L[k][p]*U[p][j] for p in range(k))

        #Calcular os elementos de L
        for i in range(k+1,n):
            L[i][k]=(A[i][k]-sum(L[i][p]*U[p][k] for p in range(k)))/U[k][k]

    return L,U  #Retornar as matrizes L e U

#Função para substituição progressiva
def substituicao_progressiva(L,b):
    n=len(b)  #Número de elementos no vetor b
    d=np.zeros_like(b)  #Inicializar o vetor d com zeros

    #Processo de substituição progressiva
    for i in range(n):
        d[i]=b[i]-sum(L[i][j]*d[j] for j in range(i))

    return d  #Retornar o vetor d
    #Esta função resolve o sistema Ly=b através da substituição progressiva.

#Função para substituição regressiva
def substituicao_regressiva(U,d):
    n=len(d)  #Número de elementos no vetor d
    x=np.zeros_like(d)  #Inicializar o vetor x com zeros

    #Processo de substituição regressiva
    for i in range(n-1,-1,-1):
        x[i]=(d[i]-sum(U[i][j]*x[j] for j in range(i+1,n)))/U[i][i]

    return x  #Retornar o vetor x
    #Esta função resolve o sistema Ux=d através da substituição regressiva.

#Decomposição LU
L,U=decomposicao_lu(A)

#Substituição progressiva
d=substituicao_progressiva(L,b)

#Substituição regressiva
x=substituicao_regressiva(U,d)

#Exibir o resultado
print("A matriz L é:")
print(L)
print("\nA matriz U é:")
print(U)
print("\nO vetor solução x é:")
print(x)